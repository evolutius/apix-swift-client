{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"APIXClient lets your create an API-X client for API-X-based servers. This sample"},{"type":"text","text":" "},{"type":"text","text":"app shows how to create an API-X client using the frame. This sample app is going"},{"type":"text","text":" "},{"type":"text","text":"to request data from a fictional API-X-based recommendation service called "},{"type":"codeVoice","code":"RecommendX"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"codeVoice","code":"RecommendX"},{"type":"text","text":" issues recommendations accross a wide variety of categories, such as"},{"type":"text","text":" "},{"type":"text","text":"songs, movies, TV shows, anime, and other kind of media."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"RecommendX"},{"type":"text","text":" service has issued an API Key and App Key so that we can use to"},{"type":"text","text":" "},{"type":"text","text":"enjoy those recommendations to create a great app or service for users."}]},{"anchor":"Writing-a-RecommendX-Client","level":2,"type":"heading","text":"Writing a RecommendX Client"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first step is to implement a "},{"type":"codeVoice","code":"RecommentXClient"},{"type":"text","text":" class that has the"},{"type":"text","text":" "},{"type":"text","text":"methods that we need to conveniently obtain recommendations. Throughout this"},{"type":"text","text":" "},{"type":"text","text":"sample app, it is assumed that there’s an structure "},{"type":"codeVoice","code":"Constants"},{"type":"text","text":" nested into"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"RecommendXClient"},{"type":"text","text":" class that constains other structures and constants"},{"type":"text","text":" "},{"type":"text","text":"that are used in the client."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition, there are types such as "},{"type":"codeVoice","code":"RecommendX.Option"},{"type":"text","text":", "},{"type":"codeVoice","code":"RecommendX.Response"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"RecommendX.SongGenre"},{"type":"text","text":", "},{"type":"codeVoice","code":"RecommendX.Song"},{"type":"text","text":", among others, that should be assumed"},{"type":"text","text":" "},{"type":"text","text":"to exist as models that encapsulate data."}]},{"anchor":"Writing-a-Generic-Method-For-Getting-Recommendations","level":3,"type":"heading","text":"Writing a Generic Method For Getting Recommendations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before implementing methods for obtaining specific sets of recommendations (such"},{"type":"text","text":" "},{"type":"text","text":"as song recommendations), it is useful to implement a generic method that takes"},{"type":"text","text":" "},{"type":"text","text":"care of the cases that all recommendations have in common. This method will be"},{"type":"text","text":" "},{"type":"text","text":"called "},{"type":"codeVoice","code":"recommendations"},{"type":"text","text":" as it returns a set of recommendations in its completion"},{"type":"text","text":" "},{"type":"text","text":"handler. These recommendations can be for any kind of recommendation that"},{"type":"text","text":" "},{"type":"codeVoice","code":"RecommendX"},{"type":"text","text":" supports."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method can then be leveraged to implement more specific methods. For this"},{"type":"text","text":" "},{"type":"text","text":"reason, this method will be made "},{"type":"codeVoice","code":"private"},{"type":"text","text":", and more specific methods will be the"},{"type":"text","text":" "},{"type":"text","text":"publicly accessible ones that the users of the client will call. There may also"},{"type":"text","text":" "},{"type":"text","text":"be helper methods such as "},{"type":"codeVoice","code":"RecommendX.optionsQueryValue(from:)"},{"type":"text","text":" that are assumed"},{"type":"text","text":" "},{"type":"text","text":"to exist throughout this sample implementation."}]},{"type":"codeListing","syntax":"swift","code":["public class RecommendXClient {","    public static let shared = RecommendXClient()","    private let requestBuilder = APIXClient.Request(apiKey: Constants.apiKey, appKey: Constants.appKey)","    private let apiXClient = APIXClient.shared","","    private func recommendations(for entity: String, parameters: [String : String], options: [RecommendX.Option]) async throws -> RecommendX.Response {","        let additionalParameters: [String : String] = [","            Constants.ItemQueryName.recommendationOptions: RecommendX.optionsQueryValue(from: options)","        ]","        let urlQueryParameters = parameters.merging(additionalParameters) { (current, _) in current }","        let request = requestBuilder.request(","            for: .get,","            entity: entity,","            method: Constants.Methods.recommendation,","            parameters: urlQueryParameters","        )","        let json = try await apixClient.json(from: request)","        let decoder = JSONDecoder()","        return try decoder.decode(RecommendX.Response.self, from: data)","    }","}"]},{"anchor":"Writing-a-Method-For-Getting-Song-Recommendations","level":3,"type":"heading","text":"Writing a Method For Getting Song Recommendations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that there’s an abstraction of code that we can leverage to obtain"},{"type":"text","text":" "},{"type":"text","text":"recommendations from the "},{"type":"codeVoice","code":"RecommendX"},{"type":"text","text":" API-X server, we can build a specific"},{"type":"text","text":" "},{"type":"text","text":"method to obtain song recommendation, as an example. In this sample, we will"},{"type":"text","text":" "},{"type":"text","text":"extend the "},{"type":"codeVoice","code":"RecommendXClient"},{"type":"text","text":" with a method to obtain song recommendations."}]},{"type":"codeListing","syntax":"swift","code":["public extension RecommendXClient {","    func songRecommendations(with genres: [RecommendX.SongGenre], options: [RecommendX.Option]) async throws -> RecommendX.SongResponse {","        let recommendXResponse = try await recommendations(","            for: Constants.Entity.song,","            parameters: [","                Constants.ItemQueryName.SongGenreList: RecommendX.genresQueyValue(from: genres),","            ],","            options: options)","","        guard let songRecommendationResponse = recommendXResponse as? RecommendX.SongRecommendation else {","            throw RecommendXError(kind: .invalidDataType))","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As can be seen in the snippet of code above, there’s an abstraction for getting"},{"type":"text","text":" "},{"type":"text","text":"song recommendations using the "},{"type":"codeVoice","code":"RecommendXClient"},{"type":"text","text":". Users of this client can now"},{"type":"text","text":" "},{"type":"text","text":"obtain song recommendations leveraging this abstraction:"}]},{"type":"codeListing","syntax":"swift","code":["Task {","    do {","        let response = RecommendXClient.shared.songRecommendations(","            with: [","                .instrumental,","                .jazz,","                .live","            ],","            options: [","                .sortByPopularity,          \/\/ Sorted by popularity","                .filter(ratedBelow: 3),     \/\/ Minimum 3 out of 5 stars rating","                .filter(durationAbove: 6),  \/\/ Maximum 10 minutes of duration","                .maxResults(500),           \/\/ Return a maximum of 500 songs","            ])","        let songRecommendations = response.songs()  \/\/ Builds and returns [RecommendX.Song]","","        DispatchQueue.main.async {","            self.displaySongs(songRecommendations)","        }","        ","    } catch {","        \/\/ Handle error","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The user simply specifies the genres of songs they’d want, the options, and finally,"},{"type":"text","text":" "},{"type":"text","text":"when the response is returned, handle the it by either logging\/display errors or"},{"type":"text","text":" "},{"type":"text","text":"displaying the song recommendations perhaps in a list."}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/apixclient\/buildingaclient"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/APIXClient\/documentation\/APIXClient\/BuildingAClient","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Build an API-X client for API-X-based servers using the power and"},{"type":"text","text":" "},{"type":"text","text":"simplicity of APIXClient."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Building An API-X Client","role":"article","modules":[{"name":"APIXClient"}]},"hierarchy":{"paths":[["doc:\/\/APIXClient\/documentation\/APIXClient"],["doc:\/\/APIXClient\/documentation\/APIXClient","doc:\/\/APIXClient\/documentation\/APIXClient\/APIXClient"]]},"seeAlsoSections":[{"title":"Getting Started","identifiers":["doc:\/\/APIXClient\/documentation\/APIXClient\/RockSolidAPIXClient","doc:\/\/APIXClient\/documentation\/APIXClient\/APIXClient","doc:\/\/APIXClient\/documentation\/APIXClient\/APIXClient\/Request"],"generated":true}],"references":{"doc://APIXClient/documentation/APIXClient/APIXClient":{"role":"symbol","title":"APIXClient","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"APIXClient"}],"abstract":[{"type":"text","text":"An object that can send requests to an API-X based server."}],"identifier":"doc:\/\/APIXClient\/documentation\/APIXClient\/APIXClient","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"APIXClient"}],"url":"\/documentation\/apixclient\/apixclient"},"doc://APIXClient/documentation/APIXClient":{"role":"collection","title":"APIXClient","abstract":[{"type":"text","text":"A framework for building API-X based clients."}],"identifier":"doc:\/\/APIXClient\/documentation\/APIXClient","kind":"symbol","type":"topic","url":"\/documentation\/apixclient"},"doc://APIXClient/documentation/APIXClient/APIXClient/Request":{"role":"symbol","title":"APIXClient.Request","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Request"}],"abstract":[{"type":"text","text":"A struct that handles the creation of requests for API-X servers."}],"identifier":"doc:\/\/APIXClient\/documentation\/APIXClient\/APIXClient\/Request","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Request"}],"url":"\/documentation\/apixclient\/apixclient\/request"},"doc://APIXClient/documentation/APIXClient/RockSolidAPIXClient":{"role":"article","title":"Building Rock-Solid and Secure API-X Clients","abstract":[{"type":"text","text":"Build rock-solid and secure API-X Client based applications or services."}],"identifier":"doc:\/\/APIXClient\/documentation\/APIXClient\/RockSolidAPIXClient","kind":"article","type":"topic","url":"\/documentation\/apixclient\/rocksolidapixclient"}}}